package it.water.role.repository;

import it.water.core.api.model.PaginableResult;
import it.water.core.api.model.Role;
import it.water.core.api.repository.query.Query;
import it.water.core.interceptors.annotations.FrameworkComponent;
import it.water.repository.entity.model.exceptions.NoResultException;
import it.water.repository.jpa.WaterJpaRepositoryImpl;
import it.water.role.api.UserRoleRepository;
import it.water.role.model.WaterUserRole;
import jakarta.transaction.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Collection;
import java.util.Collections;

/**
 * @Generated by Water Generator
 * Repository Class for Role entity.
 */
@FrameworkComponent
public class WaterUserRoleRepositoryImpl extends WaterJpaRepositoryImpl<WaterUserRole> implements UserRoleRepository {
    private static Logger logger = LoggerFactory.getLogger(WaterUserRoleRepositoryImpl.class);
    private static final String ROLE_PERSISTENCE_UNIT = "role-persistence-unit";

    public WaterUserRoleRepositoryImpl() {
        super(WaterUserRole.class, ROLE_PERSISTENCE_UNIT);
    }

    @Override
    public Collection<Role> findUserRoles(long userId) {
        Query userRolesQuery = getQueryBuilderInstance().field("userId").equalTo(userId);
        PaginableResult results = this.findAll(-1, -1, userRolesQuery, null);
        if (results != null)
            return results.getResults();
        return Collections.emptyList();
    }

    @Override
    public void removeUserRole(long userId, WaterUserRole role) {
        Query findUserRole = getQueryBuilderInstance().field("userId").equalTo(userId).and(getQueryBuilderInstance().field("role_id").equalTo(role.getId()));
        try {
            this.txExpr(Transactional.TxType.REQUIRED, entityManager -> {
                WaterUserRole waterUserRoles = this.find(findUserRole);
                this.remove(waterUserRoles.getId());
            });
        } catch (NoResultException e) {
            logger.debug("No role found for {}", userId);
        }
    }
}
